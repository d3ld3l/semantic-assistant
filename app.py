# app.py
import streamlit as st
from utils import load_all_excels, semantic_search, exact_match_results
import time

st.set_page_config(page_title="üîç Semantic Assistant", layout="wide")

st.title("üîç Semantic Assistant")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∏ –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º—ã –∏–∑ Excel-—Ñ–∞–π–ª–æ–≤.")

@st.cache_data(show_spinner="–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
def load_data():
    return load_all_excels()

try:
    df = load_data()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    st.stop()

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É:")

if query:
    with st.spinner("üîé –ò—â—É –ø–æ—Ö–æ–∂–∏–µ —Ñ—Ä–∞–∑—ã..."):
        time.sleep(0.3)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX
        results = semantic_search(query, df)
        exact_matches = exact_match_results(query, df)

    if not results and not exact_matches:
        st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        st.markdown("### üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
        for score, phrase, topics in results:
            phrase_html = f"<b style='color: #005bbb;'>{phrase}</b>"
            topics_html = ", ".join(topics)
            st.markdown(f"‚Ä¢ {phrase_html} ‚Äî <span style='color:gray'>{topics_html}</span>", unsafe_allow_html=True)

        if exact_matches:
            st.markdown("### üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É —Å–ª–æ–≤—É:")
            for phrase, topics in exact_matches:
                phrase_html = f"<b style='color: #d93f0b;'>{phrase}</b>"
                topics_html = ", ".join(topics)
                st.markdown(f"‚Ä¢ {phrase_html} ‚Äî <span style='color:gray'>{topics_html}</span>", unsafe_allow_html=True)
