# app.py
import streamlit as st
from utils import load_all_excels, semantic_search, exact_match_results

st.set_page_config(page_title="–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫", layout="wide")

st.title("üí¨ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∏ –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞–π–¥—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ—Ä–∞–∑—ã –∏ —Ç–µ–º—ã.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(show_spinner=True)
def load_data():
    return load_all_excels()

try:
    df = load_data()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    st.stop()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—Ä–æ—Å–∞
query = st.text_input("–í–∞—à –∑–∞–ø—Ä–æ—Å:")

if query:
    st.markdown("### üîé –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
    results = semantic_search(query, df)

    if not results:
        st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–º—ã—Å–ª—É.")
    else:
        for score, phrase, topics in results:
            st.markdown(f"‚úÖ **{phrase}** ‚Äî `{', '.join(topics)}` (—Å—Ö–æ–¥—Å—Ç–≤–æ: **{score:.2f}**)")

    st.markdown("---")
    st.markdown("### üéØ –¢–æ—á–Ω—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)")
    exact_matches = exact_match_results(query, df)

    if not exact_matches:
        st.info("–ù–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Å–ª–æ–≤–∞–º.")
    else:
        for phrase, topics in exact_matches:
            st.markdown(f"üî∏ <span style='color:#3366cc;font-weight:bold'>{phrase}</span> ‚Äî `{', '.join(topics)}`", unsafe_allow_html=True)
