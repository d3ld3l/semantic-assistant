# app.py
import streamlit as st
from utils import load_model, load_data, semantic_search

st.set_page_config(page_title="Semantic Assistant", layout="wide")
st.title("ü§ñ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")

model = load_model()
df = load_data(model)

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

if query:
    results, extras = semantic_search(query, df, model)

    if results:
        st.markdown("### üéØ –ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for score, phrase, topics in results:
            st.markdown(f"<div style='background-color:#e0ffe0; padding:10px; border-radius:10px;'><b>{phrase}</b><br><small>–¢–µ–º—ã: {', '.join(topics)}</small><br><small>–°—Ö–æ–¥—Å—Ç–≤–æ: {score:.2f}</small></div><br>", unsafe_allow_html=True)

    if extras:
        st.markdown("### üîç –ü—Ä—è–º—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ –∫–æ—Ä–æ—Ç–∫–∏–º —Å–ª–æ–≤–∞–º:")
        for phrase, topics in extras:
            st.markdown(f"<div style='background-color:#f0f0f0; padding:10px; border-radius:10px;'><b>{phrase}</b><br><small>–¢–µ–º—ã: {', '.join(topics)}</small></div><br>", unsafe_allow_html=True)
    
    if not results and not extras:
        st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
