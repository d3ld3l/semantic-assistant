import streamlit as st
from utils import load_all_excels, semantic_search, keyword_search

st.set_page_config(page_title="Semantic Assistant", layout="centered")
st.title("ü§ñ Semantic Assistant")

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

if query:
    try:
        df = load_all_excels()

        # –£–º–Ω—ã–π (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π) –ø–æ–∏—Å–∫
        results = semantic_search(query, df)
        if results:
            st.markdown("### üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
            for score, phrase, topics in results:
                st.markdown(f"- **{phrase}** ‚Üí {', '.join(topics)} (_{score:.2f}_)")
        else:
            st.warning("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚â§ 5
        if len(query.strip()) <= 5:
            exact_results = keyword_search(query, df)
            st.markdown("### üß∑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
            if exact_results:
                for phrase, topics in exact_results:
                    st.markdown(f"- **{phrase}** ‚Üí {', '.join(topics)}")
            else:
                st.info("–¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
